/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedChatsRouteImport } from './routes/_authed/chats.route'
import { Route as AuthedChatsIndexImport } from './routes/_authed/chats.index'
import { Route as AuthedChatsHistoryImport } from './routes/_authed/chats.history'
import { Route as AuthedChatsChatIdImport } from './routes/_authed/chats.$chatId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedChatsRouteRoute = AuthedChatsRouteImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedChatsIndexRoute = AuthedChatsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedChatsRouteRoute,
} as any)

const AuthedChatsHistoryRoute = AuthedChatsHistoryImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => AuthedChatsRouteRoute,
} as any)

const AuthedChatsChatIdRoute = AuthedChatsChatIdImport.update({
  id: '/$chatId',
  path: '/$chatId',
  getParentRoute: () => AuthedChatsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/chats': {
      id: '/_authed/chats'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AuthedChatsRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/chats/$chatId': {
      id: '/_authed/chats/$chatId'
      path: '/$chatId'
      fullPath: '/chats/$chatId'
      preLoaderRoute: typeof AuthedChatsChatIdImport
      parentRoute: typeof AuthedChatsRouteImport
    }
    '/_authed/chats/history': {
      id: '/_authed/chats/history'
      path: '/history'
      fullPath: '/chats/history'
      preLoaderRoute: typeof AuthedChatsHistoryImport
      parentRoute: typeof AuthedChatsRouteImport
    }
    '/_authed/chats/': {
      id: '/_authed/chats/'
      path: '/'
      fullPath: '/chats/'
      preLoaderRoute: typeof AuthedChatsIndexImport
      parentRoute: typeof AuthedChatsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthedChatsRouteRouteChildren {
  AuthedChatsChatIdRoute: typeof AuthedChatsChatIdRoute
  AuthedChatsHistoryRoute: typeof AuthedChatsHistoryRoute
  AuthedChatsIndexRoute: typeof AuthedChatsIndexRoute
}

const AuthedChatsRouteRouteChildren: AuthedChatsRouteRouteChildren = {
  AuthedChatsChatIdRoute: AuthedChatsChatIdRoute,
  AuthedChatsHistoryRoute: AuthedChatsHistoryRoute,
  AuthedChatsIndexRoute: AuthedChatsIndexRoute,
}

const AuthedChatsRouteRouteWithChildren =
  AuthedChatsRouteRoute._addFileChildren(AuthedChatsRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedChatsRouteRoute: typeof AuthedChatsRouteRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedChatsRouteRoute: AuthedChatsRouteRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/chats': typeof AuthedChatsRouteRouteWithChildren
  '/chats/$chatId': typeof AuthedChatsChatIdRoute
  '/chats/history': typeof AuthedChatsHistoryRoute
  '/chats/': typeof AuthedChatsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/chats/$chatId': typeof AuthedChatsChatIdRoute
  '/chats/history': typeof AuthedChatsHistoryRoute
  '/chats': typeof AuthedChatsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/chats': typeof AuthedChatsRouteRouteWithChildren
  '/_authed/chats/$chatId': typeof AuthedChatsChatIdRoute
  '/_authed/chats/history': typeof AuthedChatsHistoryRoute
  '/_authed/chats/': typeof AuthedChatsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/chats'
    | '/chats/$chatId'
    | '/chats/history'
    | '/chats/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/chats/$chatId' | '/chats/history' | '/chats'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/chats'
    | '/_authed/chats/$chatId'
    | '/_authed/chats/history'
    | '/_authed/chats/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/chats"
      ]
    },
    "/_authed/chats": {
      "filePath": "_authed/chats.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/chats/$chatId",
        "/_authed/chats/history",
        "/_authed/chats/"
      ]
    },
    "/_authed/chats/$chatId": {
      "filePath": "_authed/chats.$chatId.tsx",
      "parent": "/_authed/chats"
    },
    "/_authed/chats/history": {
      "filePath": "_authed/chats.history.tsx",
      "parent": "/_authed/chats"
    },
    "/_authed/chats/": {
      "filePath": "_authed/chats.index.tsx",
      "parent": "/_authed/chats"
    }
  }
}
ROUTE_MANIFEST_END */
